// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantOrderingSystem.Data;

#nullable disable

namespace RestaurantOrderingSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4017),
                            Description = "Sıcak çorbalar",
                            Name = "Çorbalar"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4019),
                            Description = "Ana yemek çeşitleri",
                            Name = "Ana Yemekler"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4021),
                            Description = "Sıcak ve soğuk içecekler",
                            Name = "İçecekler"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4023),
                            Description = "Tatlı çeşitleri",
                            Name = "Tatlılar"
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4207),
                            Description = "Geleneksel mercimek çorbası",
                            IsAvailable = true,
                            Name = "Mercimek Çorbası",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4209),
                            Description = "Ev yapımı tavuk çorbası",
                            IsAvailable = true,
                            Name = "Tavuk Çorbası",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4211),
                            Description = "Baharatlarla marine edilmiş izgara tavuk",
                            IsAvailable = true,
                            Name = "Izgara Tavuk",
                            Price = 85.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4213),
                            Description = "Ev yapımı köfte",
                            IsAvailable = true,
                            Name = "Köfte",
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4215),
                            Description = "Günün taze balığı",
                            IsAvailable = true,
                            Name = "Balık Izgara",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4217),
                            Description = "Türk çayı",
                            IsAvailable = true,
                            Name = "Çay",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4219),
                            Description = "Türk kahvesi",
                            IsAvailable = true,
                            Name = "Kahve",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4221),
                            Description = "Soğuk kola",
                            IsAvailable = true,
                            Name = "Kola",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4223),
                            Description = "Antep fıstıklı baklava",
                            IsAvailable = true,
                            Name = "Baklava",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4225),
                            Description = "Ev yapımı sütlaç",
                            IsAvailable = true,
                            Name = "Sütlaç",
                            Price = 35.00m
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("OccupiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4175),
                            IsOccupied = false,
                            Number = "Masa 1"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4177),
                            IsOccupied = false,
                            Number = "Masa 2"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 6,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4179),
                            IsOccupied = false,
                            Number = "Masa 3"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 2,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4180),
                            IsOccupied = false,
                            Number = "Masa 4"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 8,
                            CreatedAt = new DateTime(2025, 6, 5, 5, 3, 23, 500, DateTimeKind.Local).AddTicks(4182),
                            IsOccupied = false,
                            Number = "Masa 5"
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.MenuItem", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Order", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Category", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Table", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
