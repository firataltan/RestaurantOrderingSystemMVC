// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantOrderingSystem.Data;

#nullable disable

namespace RestaurantOrderingSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250608231328_AddOrderHistory")]
    partial class AddOrderHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4158),
                            Description = "Sıcak çorbalar",
                            Name = "Çorbalar"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4160),
                            Description = "Ana yemek çeşitleri",
                            Name = "Ana Yemekler"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4162),
                            Description = "Sıcak ve soğuk içecekler",
                            Name = "İçecekler"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4164),
                            Description = "Tatlı çeşitleri",
                            Name = "Tatlılar"
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4566),
                            Description = "Geleneksel mercimek çorbası",
                            IsAvailable = true,
                            Name = "Mercimek Çorbası",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4568),
                            Description = "Ev yapımı tavuk çorbası",
                            IsAvailable = true,
                            Name = "Tavuk Çorbası",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4570),
                            Description = "Baharatlarla marine edilmiş izgara tavuk",
                            IsAvailable = true,
                            Name = "Izgara Tavuk",
                            Price = 85.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4573),
                            Description = "Ev yapımı köfte",
                            IsAvailable = true,
                            Name = "Köfte",
                            Price = 75.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4624),
                            Description = "Günün taze balığı",
                            IsAvailable = true,
                            Name = "Balık Izgara",
                            Price = 120.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4627),
                            Description = "Türk çayı",
                            IsAvailable = true,
                            Name = "Çay",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4628),
                            Description = "Türk kahvesi",
                            IsAvailable = true,
                            Name = "Kahve",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4630),
                            Description = "Soğuk kola",
                            IsAvailable = true,
                            Name = "Kola",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4631),
                            Description = "Antep fıstıklı baklava",
                            IsAvailable = true,
                            Name = "Baklava",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4633),
                            Description = "Ev yapımı sütlaç",
                            IsAvailable = true,
                            Name = "Sütlaç",
                            Price = 35.00m
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnonymousId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderHistoryId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderHistoryId");

                    b.ToTable("OrderHistoryItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasFilter("[EmployeeCode] IS NOT NULL");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeCode = "SRV001",
                            FirstName = "Ahmet",
                            HireDate = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4484),
                            IsActive = true,
                            LastName = "Yılmaz"
                        },
                        new
                        {
                            Id = 2,
                            EmployeeCode = "SRV002",
                            FirstName = "Ayşe",
                            HireDate = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4487),
                            IsActive = true,
                            LastName = "Kaya"
                        },
                        new
                        {
                            Id = 3,
                            EmployeeCode = "SRV003",
                            FirstName = "Mehmet",
                            HireDate = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4488),
                            IsActive = true,
                            LastName = "Öz"
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("OccupiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<string>("ReservationName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("ServerId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 4,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4525),
                            IsOccupied = false,
                            Number = "Masa 1",
                            PositionX = 0,
                            PositionY = 0,
                            ServerId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4527),
                            IsOccupied = false,
                            Number = "Masa 2",
                            PositionX = 0,
                            PositionY = 0,
                            ServerId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 6,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4529),
                            IsOccupied = false,
                            Number = "Masa 3",
                            PositionX = 0,
                            PositionY = 0,
                            ServerId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4531),
                            IsOccupied = false,
                            Number = "Masa 4",
                            PositionX = 0,
                            PositionY = 0,
                            ServerId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 8,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(4532),
                            IsOccupied = false,
                            Number = "Masa 5",
                            PositionX = 0,
                            PositionY = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentTableId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTableId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(5108),
                            Email = "admin@restaurant.com",
                            FullName = "Sistem Yöneticisi",
                            IsActive = true,
                            Password = "BJyF02Ub3WrfrsuyP1nqszZNtuI4akFT+LOa2twPSD0=",
                            Role = 3,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(5134),
                            Email = "kitchen@restaurant.com",
                            FullName = "Mutfak Şefi",
                            IsActive = true,
                            Password = "Vy1tWhzko9TBM9/sMO9Ud6q6kW+AjQqW5U34BM89vIg=",
                            Role = 2,
                            Username = "kitchen"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 9, 2, 13, 28, 226, DateTimeKind.Local).AddTicks(5151),
                            Email = "user@restaurant.com",
                            FullName = "Test Kullanıcısı",
                            IsActive = true,
                            Password = "KPfs1ETcAICf2bnT0CZw6qxxLdWYEzeKTp5WYLMCRQQ=",
                            Role = 1,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.MenuItem", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Order", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantOrderingSystem.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderHistory", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantOrderingSystem.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderHistoryItem", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantOrderingSystem.Models.Entities.OrderHistory", "OrderHistory")
                        .WithMany("Items")
                        .HasForeignKey("OrderHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("OrderHistory");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Table", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Server", "Server")
                        .WithMany("AssignedTables")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Server");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.User", b =>
                {
                    b.HasOne("RestaurantOrderingSystem.Models.Entities.Table", "CurrentTable")
                        .WithMany()
                        .HasForeignKey("CurrentTableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentTable");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Category", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.OrderHistory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Server", b =>
                {
                    b.Navigation("AssignedTables");
                });

            modelBuilder.Entity("RestaurantOrderingSystem.Models.Entities.Table", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
